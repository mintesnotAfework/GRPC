// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: user.proto

package number

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NumService_Rnd_FullMethodName = "/number.NumService/Rnd"
)

// NumServiceClient is the client API for NumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumServiceClient interface {
	Rnd(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NumResponse], error)
}

type numServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumServiceClient(cc grpc.ClientConnInterface) NumServiceClient {
	return &numServiceClient{cc}
}

func (c *numServiceClient) Rnd(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NumResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NumService_ServiceDesc.Streams[0], NumService_Rnd_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NumRequest, NumResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NumService_RndClient = grpc.ServerStreamingClient[NumResponse]

// NumServiceServer is the server API for NumService service.
// All implementations must embed UnimplementedNumServiceServer
// for forward compatibility.
type NumServiceServer interface {
	Rnd(*NumRequest, grpc.ServerStreamingServer[NumResponse]) error
	mustEmbedUnimplementedNumServiceServer()
}

// UnimplementedNumServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNumServiceServer struct{}

func (UnimplementedNumServiceServer) Rnd(*NumRequest, grpc.ServerStreamingServer[NumResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Rnd not implemented")
}
func (UnimplementedNumServiceServer) mustEmbedUnimplementedNumServiceServer() {}
func (UnimplementedNumServiceServer) testEmbeddedByValue()                    {}

// UnsafeNumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumServiceServer will
// result in compilation errors.
type UnsafeNumServiceServer interface {
	mustEmbedUnimplementedNumServiceServer()
}

func RegisterNumServiceServer(s grpc.ServiceRegistrar, srv NumServiceServer) {
	// If the following call pancis, it indicates UnimplementedNumServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NumService_ServiceDesc, srv)
}

func _NumService_Rnd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumServiceServer).Rnd(m, &grpc.GenericServerStream[NumRequest, NumResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NumService_RndServer = grpc.ServerStreamingServer[NumResponse]

// NumService_ServiceDesc is the grpc.ServiceDesc for NumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "number.NumService",
	HandlerType: (*NumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rnd",
			Handler:       _NumService_Rnd_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
